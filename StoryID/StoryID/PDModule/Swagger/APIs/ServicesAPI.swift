//
// ServicesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ServicesAPI {
    /**
     Создание нового сервиса

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createService(body: ServiceViewModel? = nil, completion: @escaping ((_ data: ServiceViewModel?,_ error: Error?) -> Void)) {
        createServiceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Создание нового сервиса
     - POST /Services

     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "createdBy",
  "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modifiedBy" : "modifiedBy",
  "scopes" : [ "scopes", "scopes" ],
  "id" : "id"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ServiceViewModel> 
     */
    open class func createServiceWithRequestBuilder(body: ServiceViewModel? = nil) -> RequestBuilder<ServiceViewModel> {
        let path = "/Services"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServiceViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Удаление сервиса по идентификатору

     - parameter _id: (path) Уникальный идентификатор в формате StoryId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteServiceById(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteServiceByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Удаление сервиса по идентификатору
     - DELETE /Services/{id}

     - parameter _id: (path) Уникальный идентификатор в формате StoryId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteServiceByIdWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Services/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение сервиса по идентификатору

     - parameter _id: (path) Уникальный идентификатор в формате StoryId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getServiceById(_id: String, completion: @escaping ((_ data: ServiceViewModel?,_ error: Error?) -> Void)) {
        getServiceByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получение сервиса по идентификатору
     - GET /Services/{id}

     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "createdBy",
  "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modifiedBy" : "modifiedBy",
  "scopes" : [ "scopes", "scopes" ],
  "id" : "id"
}}]
     - parameter _id: (path) Уникальный идентификатор в формате StoryId 

     - returns: RequestBuilder<ServiceViewModel> 
     */
    open class func getServiceByIdWithRequestBuilder(_id: String) -> RequestBuilder<ServiceViewModel> {
        var path = "/Services/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServiceViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение списка разрешений для сервиса

     - parameter _id: (path) Уникальный идентификатор в формате StoryId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listServiceScopes(_id: String, completion: @escaping ((_ data: [ScopeViewModel]?,_ error: Error?) -> Void)) {
        listServiceScopesWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получение списка разрешений для сервиса
     - GET /Services/{id}/scopes

     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "description" : "description",
  "enabled" : true
}, {
  "name" : "name",
  "description" : "description",
  "enabled" : true
} ]}]
     - parameter _id: (path) Уникальный идентификатор в формате StoryId 

     - returns: RequestBuilder<[ScopeViewModel]> 
     */
    open class func listServiceScopesWithRequestBuilder(_id: String) -> RequestBuilder<[ScopeViewModel]> {
        var path = "/Services/{id}/scopes"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ScopeViewModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Список сервисов

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listServices(completion: @escaping ((_ data: [ServiceViewModel]?,_ error: Error?) -> Void)) {
        listServicesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Список сервисов
     - GET /Services

     - examples: [{contentType=application/json, example=[ {
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "createdBy",
  "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modifiedBy" : "modifiedBy",
  "scopes" : [ "scopes", "scopes" ],
  "id" : "id"
}, {
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "createdBy",
  "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modifiedBy" : "modifiedBy",
  "scopes" : [ "scopes", "scopes" ],
  "id" : "id"
} ]}]

     - returns: RequestBuilder<[ServiceViewModel]> 
     */
    open class func listServicesWithRequestBuilder() -> RequestBuilder<[ServiceViewModel]> {
        let path = "/Services"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ServiceViewModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Удаление разрешения

     - parameter _id: (path) Идентификатор сервиса 
     - parameter name: (query) Разрешение 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeServiceScope(_id: String, name: String, completion: @escaping ((_ data: [ScopeViewModel]?,_ error: Error?) -> Void)) {
        removeServiceScopeWithRequestBuilder(_id: _id, name: name).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Удаление разрешения
     - DELETE /Services/{id}/scopes

     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "description" : "description",
  "enabled" : true
}, {
  "name" : "name",
  "description" : "description",
  "enabled" : true
} ]}]
     - parameter _id: (path) Идентификатор сервиса 
     - parameter name: (query) Разрешение 

     - returns: RequestBuilder<[ScopeViewModel]> 
     */
    open class func removeServiceScopeWithRequestBuilder(_id: String, name: String) -> RequestBuilder<[ScopeViewModel]> {
        var path = "/Services/{id}/scopes"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name
        ])

        let requestBuilder: RequestBuilder<[ScopeViewModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Создание или изменения существующегоразрешения

     - parameter _id: (path) Уникальный идентификатор в формате StoryId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setServiceScope(_id: String, body: ScopeViewModel? = nil, completion: @escaping ((_ data: [ScopeViewModel]?,_ error: Error?) -> Void)) {
        setServiceScopeWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Создание или изменения существующегоразрешения
     - PUT /Services/{id}/scopes

     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "description" : "description",
  "enabled" : true
}, {
  "name" : "name",
  "description" : "description",
  "enabled" : true
} ]}]
     - parameter _id: (path) Уникальный идентификатор в формате StoryId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<[ScopeViewModel]> 
     */
    open class func setServiceScopeWithRequestBuilder(_id: String, body: ScopeViewModel? = nil) -> RequestBuilder<[ScopeViewModel]> {
        var path = "/Services/{id}/scopes"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ScopeViewModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Обновление сервиса

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateService(body: ServiceViewModel? = nil, completion: @escaping ((_ data: ServiceViewModel?,_ error: Error?) -> Void)) {
        updateServiceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Обновление сервиса
     - PUT /Services

     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "createdBy",
  "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modifiedBy" : "modifiedBy",
  "scopes" : [ "scopes", "scopes" ],
  "id" : "id"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ServiceViewModel> 
     */
    open class func updateServiceWithRequestBuilder(body: ServiceViewModel? = nil) -> RequestBuilder<ServiceViewModel> {
        let path = "/Services"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServiceViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
