//
// ApplicationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ApplicationsAPI {
    /**
     Создание нового приложения

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createApplication(body: CreateApplicationViewModel? = nil, completion: @escaping ((_ data: CreateApplicationViewModel?,_ error: Error?) -> Void)) {
        createApplicationWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Создание нового приложения
     - POST /Applications

     - examples: [{contentType=application/json, example={
  "redirectUri" : "redirectUri",
  "postLogoutRedirectUri" : "postLogoutRedirectUri",
  "ticks" : 1,
  "appType" : 0,
  "name" : "name",
  "description" : "description",
  "expiration" : 6,
  "id" : "id",
  "enabled" : true
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<CreateApplicationViewModel> 
     */
    open class func createApplicationWithRequestBuilder(body: CreateApplicationViewModel? = nil) -> RequestBuilder<CreateApplicationViewModel> {
        let path = "/Applications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreateApplicationViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Удаление приложения по идентификатору

     - parameter _id: (path) Уникальный идентификатор в формате StoryId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteApplicationById(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteApplicationByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Удаление приложения по идентификатору
     - DELETE /Applications/{id}

     - parameter _id: (path) Уникальный идентификатор в формате StoryId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteApplicationByIdWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/Applications/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение приложения по идентификатору

     - parameter _id: (path) Уникальный идентификатор в формате StoryId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApplicationById(_id: String, completion: @escaping ((_ data: ApplicationViewModel?,_ error: Error?) -> Void)) {
        getApplicationByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получение приложения по идентификатору
     - GET /Applications/{id}

     - examples: [{contentType=application/json, example={
  "redirectUri" : "redirectUri",
  "postLogoutRedirectUri" : "postLogoutRedirectUri",
  "ticks" : 1,
  "appType" : 0,
  "name" : "name",
  "client" : "client",
  "description" : "description",
  "expiration" : 6,
  "secret" : "secret",
  "id" : "id",
  "enabled" : true
}}]
     - parameter _id: (path) Уникальный идентификатор в формате StoryId 

     - returns: RequestBuilder<ApplicationViewModel> 
     */
    open class func getApplicationByIdWithRequestBuilder(_id: String) -> RequestBuilder<ApplicationViewModel> {
        var path = "/Applications/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApplicationViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение списка разрешений для сервиса

     - parameter _id: (path) Уникальный идентификатор в формате StoryId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listApplicationScopes(_id: String, completion: @escaping ((_ data: [ScopeViewModel]?,_ error: Error?) -> Void)) {
        listApplicationScopesWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получение списка разрешений для сервиса
     - GET /Applications/{id}/scopes

     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "description" : "description",
  "enabled" : true
}, {
  "name" : "name",
  "description" : "description",
  "enabled" : true
} ]}]
     - parameter _id: (path) Уникальный идентификатор в формате StoryId 

     - returns: RequestBuilder<[ScopeViewModel]> 
     */
    open class func listApplicationScopesWithRequestBuilder(_id: String) -> RequestBuilder<[ScopeViewModel]> {
        var path = "/Applications/{id}/scopes"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ScopeViewModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Список приложений

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listApplications(completion: @escaping ((_ data: [ApplicationViewModel]?,_ error: Error?) -> Void)) {
        listApplicationsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Список приложений
     - GET /Applications

     - examples: [{contentType=application/json, example=[ {
  "redirectUri" : "redirectUri",
  "postLogoutRedirectUri" : "postLogoutRedirectUri",
  "ticks" : 1,
  "appType" : 0,
  "name" : "name",
  "client" : "client",
  "description" : "description",
  "expiration" : 6,
  "secret" : "secret",
  "id" : "id",
  "enabled" : true
}, {
  "redirectUri" : "redirectUri",
  "postLogoutRedirectUri" : "postLogoutRedirectUri",
  "ticks" : 1,
  "appType" : 0,
  "name" : "name",
  "client" : "client",
  "description" : "description",
  "expiration" : 6,
  "secret" : "secret",
  "id" : "id",
  "enabled" : true
} ]}]

     - returns: RequestBuilder<[ApplicationViewModel]> 
     */
    open class func listApplicationsWithRequestBuilder() -> RequestBuilder<[ApplicationViewModel]> {
        let path = "/Applications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ApplicationViewModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Сбрасывает секрет

     - parameter _id: (query) Уникальный идентификатор в формате StoryId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resetApplicationSecret(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        resetApplicationSecretWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Сбрасывает секрет
     - PUT /Applications/reset

     - parameter _id: (query) Уникальный идентификатор в формате StoryId 

     - returns: RequestBuilder<Void> 
     */
    open class func resetApplicationSecretWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        let path = "/Applications/reset"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "id": _id
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Создание или изменение существующей коллекции разрешений

     - parameter _id: (path) Уникальный идентификатор в формате StoryId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setApplicationScopes(_id: String, body: [String]? = nil, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        setApplicationScopesWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Создание или изменение существующей коллекции разрешений
     - PUT /Applications/{id}/scopes

     - examples: [{contentType=application/json, example=[ "", "" ]}]
     - parameter _id: (path) Уникальный идентификатор в формате StoryId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<[String]> 
     */
    open class func setApplicationScopesWithRequestBuilder(_id: String, body: [String]? = nil) -> RequestBuilder<[String]> {
        var path = "/Applications/{id}/scopes"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Обновление приложения

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateApplication(body: CreateApplicationViewModel? = nil, completion: @escaping ((_ data: CreateApplicationViewModel?,_ error: Error?) -> Void)) {
        updateApplicationWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Обновление приложения
     - PUT /Applications

     - examples: [{contentType=application/json, example={
  "redirectUri" : "redirectUri",
  "postLogoutRedirectUri" : "postLogoutRedirectUri",
  "ticks" : 1,
  "appType" : 0,
  "name" : "name",
  "description" : "description",
  "expiration" : 6,
  "id" : "id",
  "enabled" : true
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<CreateApplicationViewModel> 
     */
    open class func updateApplicationWithRequestBuilder(body: CreateApplicationViewModel? = nil) -> RequestBuilder<CreateApplicationViewModel> {
        let path = "/Applications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreateApplicationViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
