//
// ProfileBankAccountsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ProfileBankAccountsAPI {
    /**
     Создание банковского счета текущего пользователя

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createBankAccount(body: StoryBankAccountDTO? = nil, completion: @escaping ((_ data: StoryBankAccount?,_ error: Error?) -> Void)) {
        createBankAccountWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Создание банковского счета текущего пользователя
     - POST /profile/bankaccounts

     - examples: [{contentType=application/json, example={
  "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "verified" : true,
  "verifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "verifiedBy" : "verifiedBy",
  "bank" : "bank",
  "profileId" : "profileId",
  "correspondentAccount" : "correspondentAccount",
  "name" : "name",
  "modifiedBy" : "modifiedBy",
  "id" : "id",
  "settlementAccount" : "settlementAccount",
  "bic" : "bic"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<StoryBankAccount> 
     */
    open class func createBankAccountWithRequestBuilder(body: StoryBankAccountDTO? = nil) -> RequestBuilder<StoryBankAccount> {
        let path = "/profile/bankaccounts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<StoryBankAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Удаление банковского счета текущего пользователя

     - parameter _id: (path) Уникальный идентификатор в формате StoryId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteBankAccountById(_id: String, completion: @escaping ((_ data: StoryBankAccount?,_ error: Error?) -> Void)) {
        deleteBankAccountByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Удаление банковского счета текущего пользователя
     - DELETE /profile/bankaccounts/{id}

     - examples: [{contentType=application/json, example={
  "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "verified" : true,
  "verifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "verifiedBy" : "verifiedBy",
  "bank" : "bank",
  "profileId" : "profileId",
  "correspondentAccount" : "correspondentAccount",
  "name" : "name",
  "modifiedBy" : "modifiedBy",
  "id" : "id",
  "settlementAccount" : "settlementAccount",
  "bic" : "bic"
}}]
     - parameter _id: (path) Уникальный идентификатор в формате StoryId 

     - returns: RequestBuilder<StoryBankAccount> 
     */
    open class func deleteBankAccountByIdWithRequestBuilder(_id: String) -> RequestBuilder<StoryBankAccount> {
        var path = "/profile/bankaccounts/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<StoryBankAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение банковского счета текущего пользователя

     - parameter _id: (path) Уникальный идентификатор в формате StoryId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBankAccount(_id: String, completion: @escaping ((_ data: StoryBankAccount?,_ error: Error?) -> Void)) {
        getBankAccountWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получение банковского счета текущего пользователя
     - GET /profile/bankaccounts/{id}

     - examples: [{contentType=application/json, example={
  "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "verified" : true,
  "verifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "verifiedBy" : "verifiedBy",
  "bank" : "bank",
  "profileId" : "profileId",
  "correspondentAccount" : "correspondentAccount",
  "name" : "name",
  "modifiedBy" : "modifiedBy",
  "id" : "id",
  "settlementAccount" : "settlementAccount",
  "bic" : "bic"
}}]
     - parameter _id: (path) Уникальный идентификатор в формате StoryId 

     - returns: RequestBuilder<StoryBankAccount> 
     */
    open class func getBankAccountWithRequestBuilder(_id: String) -> RequestBuilder<StoryBankAccount> {
        var path = "/profile/bankaccounts/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<StoryBankAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Получение списка счетов текущего пользователя

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listBankAccounts(completion: @escaping ((_ data: [StoryBankAccount]?,_ error: Error?) -> Void)) {
        listBankAccountsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получение списка счетов текущего пользователя
     - GET /profile/bankaccounts

     - examples: [{contentType=application/json, example=[ {
  "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "verified" : true,
  "verifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "verifiedBy" : "verifiedBy",
  "bank" : "bank",
  "profileId" : "profileId",
  "correspondentAccount" : "correspondentAccount",
  "name" : "name",
  "modifiedBy" : "modifiedBy",
  "id" : "id",
  "settlementAccount" : "settlementAccount",
  "bic" : "bic"
}, {
  "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "verified" : true,
  "verifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "verifiedBy" : "verifiedBy",
  "bank" : "bank",
  "profileId" : "profileId",
  "correspondentAccount" : "correspondentAccount",
  "name" : "name",
  "modifiedBy" : "modifiedBy",
  "id" : "id",
  "settlementAccount" : "settlementAccount",
  "bic" : "bic"
} ]}]

     - returns: RequestBuilder<[StoryBankAccount]> 
     */
    open class func listBankAccountsWithRequestBuilder() -> RequestBuilder<[StoryBankAccount]> {
        let path = "/profile/bankaccounts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[StoryBankAccount]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Изменение банковского счета текущего пользователя

     - parameter _id: (path) Уникальный идентификатор в формате StoryId 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateBankAccount(_id: String, body: StoryBankAccountDTO? = nil, completion: @escaping ((_ data: StoryBankAccount?,_ error: Error?) -> Void)) {
        updateBankAccountWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Изменение банковского счета текущего пользователя
     - PUT /profile/bankaccounts/{id}

     - examples: [{contentType=application/json, example={
  "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "verified" : true,
  "verifiedAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "verifiedBy" : "verifiedBy",
  "bank" : "bank",
  "profileId" : "profileId",
  "correspondentAccount" : "correspondentAccount",
  "name" : "name",
  "modifiedBy" : "modifiedBy",
  "id" : "id",
  "settlementAccount" : "settlementAccount",
  "bic" : "bic"
}}]
     - parameter _id: (path) Уникальный идентификатор в формате StoryId 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<StoryBankAccount> 
     */
    open class func updateBankAccountWithRequestBuilder(_id: String, body: StoryBankAccountDTO? = nil) -> RequestBuilder<StoryBankAccount> {
        var path = "/profile/bankaccounts/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<StoryBankAccount>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
