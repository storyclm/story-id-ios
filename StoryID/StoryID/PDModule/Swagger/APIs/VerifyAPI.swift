//
// VerifyAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class VerifyAPI {
    /**
     Проверка на существования пользователя

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func loginExists(body: UserExistsRequestViewModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        loginExistsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Проверка на существования пользователя
     - PUT /Verify/exists

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func loginExistsWithRequestBuilder(body: UserExistsRequestViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/Verify/exists"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Верификация номера мобильного телефона

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendPhoneVerificationCode(body: CodeVerifyViewModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        sendPhoneVerificationCodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Верификация номера мобильного телефона
     - PUT /Verify/phone
     - 

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func sendPhoneVerificationCodeWithRequestBuilder(body: CodeVerifyViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/Verify/phone"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Получения верификационного кода

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendVerificationCode(body: LoginVerifyRequestViewModel? = nil, completion: @escaping ((_ data: VerifyPhoneResultViewModel?,_ error: Error?) -> Void)) {
        sendVerificationCodeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получения верификационного кода
     - POST /Verify/code

     - examples: [{contentType=application/json, example={
  "signature" : "signature",
  "expiration" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<VerifyPhoneResultViewModel> 
     */
    open class func sendVerificationCodeWithRequestBuilder(body: LoginVerifyRequestViewModel? = nil) -> RequestBuilder<VerifyPhoneResultViewModel> {
        let path = "/Verify/code"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VerifyPhoneResultViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
